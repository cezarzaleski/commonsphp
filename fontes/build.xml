<?xml version="1.0" encoding="UTF-8"?>
<project default="build">
    <property name="sourcedir" value="${basedir}/library"/>
    <!-- Zend Framework 2
    <property name="sourcedir" value="${basedir}/module"/> -->
    <!-- Zend Framework 1
    <property name="sourcedir" value="${basedir}/application"/> -->
    <!-- Módulos, bibliotecas...
    <property name="sourcedir" value="${basedir}/src"/> -->

    <condition property="extension" value=".bat" else="">
        <and>
          <os family="windows"/>
          <not>
            <os family="unix"/>
          </not>
        </and>
    </condition>

	<property name="builddir" value="${basedir}/build"/>
	<property name="composer" value="${builddir}/composer.phar"/>

    <target name="build"
            depends="prepare,composer,lint,phploc,pdepend,phpmd-ci,phpcs-ci,phpcpd,phpdox,phpunit,phpcb"/>

    <target name="build-parallel"
            depends="prepare,composer,lint,tools-parallel,phpunit,phpcb"/>

    <target name="build-docs"
            depends="prepare,composer,phploc,phpdox,phpcb"/>

    <target name="tools-parallel"
            description="Executa ferramentas em paralelo">
        <parallel threadCount="2">
            <sequential>
                <antcall target="pdepend"/>
                <antcall target="phpmd-ci"/>
            </sequential>
            <antcall target="phpcpd"/>
            <antcall target="phpcs-ci"/>
            <antcall target="phploc"/>
            <antcall target="phpdox"/>
        </parallel>
    </target>

    <target name="clean"
            description="Remoção de artefatos de build">
        <delete dir="${builddir}/api"/>
        <delete dir="${builddir}/code-browser"/>
        <delete dir="${builddir}/coverage"/>
        <delete dir="${builddir}/logs"/>
        <delete dir="${builddir}/pdepend"/>
        <delete dir="${builddir}/phpdox"/>
        <delete dir="${builddir}/graph"/>
    </target>

    <target name="prepare"
            depends="clean"
            description="Preparação para build">
        <mkdir dir="${builddir}/api"/>
        <mkdir dir="${builddir}/code-browser"/>
        <mkdir dir="${builddir}/coverage"/>
        <mkdir dir="${builddir}/logs"/>
        <mkdir dir="${builddir}/pdepend"/>
        <mkdir dir="${builddir}/phpdox"/>
    </target>

	<target name="php-check">
		<condition property="php" value="php">
		  <not>
			<isset property="${php}"/>
		  </not>
		</condition>
	</target>

	<target name="composer-check" depends="prepare">
		<available file="${composer}" property="composer.present"/>
	</target>
	
	<target name="composer-lock" depends="prepare">
		<available file="${basedir}/composer.lock" property="composer.lock"/>
	</target>

	<target name="composer-download" depends="composer-check" unless="composer.present">
		<property name="composer.noselfupdate" value="true"/>
		<get src="https://getcomposer.org/composer.phar" dest="${composer}"/>
	</target>

	<target name="composer-selfupdate" depends="php-check,composer-download" unless="composer.noselfupdate">
		<exec executable="${php}">
		  <arg value="${composer}"/>
		  <arg value="self-update"/>
		</exec>
	</target>

	<target name="composer-update" depends="composer-selfupdate" unless="composer.lock" description="Acionando composer update">
		<exec executable="${php}">
		  <arg value="${composer}"/>
		  <arg value="update"/>
		  <arg value="-vvv"/>
		  <arg value="--profile"/>
		  <arg value="--prefer-dist"/>
		</exec>
	</target>

	<target name="composer-install" depends="composer-selfupdate" unless="composer.noinstall" if="composer.lock" description="Acionando composer install">
		<exec executable="${php}">
		  <arg value="${composer}"/>
		  <arg value="install"/>
		  <arg value="-vvv"/>
		  <arg value="--profile"/>
		  <arg value="--prefer-dist"/>
		</exec>
	</target>
	
	<target name="composer" depends="composer-lock,composer-update,composer-install"/>

    <target name="lint"
            description="Verificação de sintaxe do código fonte">
        <exec executable="${basedir}/vendor/bin/phplint${extension}">
            <arg value="${sourcedir}"/>
        </exec>
    </target>

    <target name="phploc"
            description="Mensuração de tamanho de software">
        <exec executable="${basedir}/vendor/bin/phploc${extension}">
            <arg value="--log-xml"/>
            <arg value="${builddir}/logs/phploc.xml"/>
            <arg path="${sourcedir}"/>
        </exec>
    </target>

    <target name="pdepend"
            description="Cálculo de métricas de software">
        <exec executable="${basedir}/vendor/bin/pdepend${extension}">
			<arg line="-d memory_limit=-1"/>
            <arg value="--jdepend-xml=${builddir}/logs/jdepend.xml"/>
            <arg value="--jdepend-chart=${builddir}/pdepend/dependencies.svg"/>
            <arg value="--overview-pyramid=${builddir}/pdepend/overview-pyramid.svg"/>
            <arg path="${sourcedir}"/>
        </exec>
    </target>

    <target name="phpmd"
            description="Detecção de código desorganizado, com output legível para uso antes de realizar commit">
        <exec executable="${basedir}/vendor/bin/phpmd${extension}">
            <arg path="${sourcedir}"/>
            <arg value="text"/>
            <arg value="${builddir}/phpmd.xml"/>
        </exec>
    </target>

    <target name="phpmd-ci"
            description="Detecção de código desorganizado, com geração de logs para o servidor de integração contínua">
        <exec executable="${basedir}/vendor/bin/phpmd${extension}">
            <arg path="${sourcedir}"/>
            <arg value="xml"/>
            <arg value="${builddir}/phpmd.xml"/>
            <arg value="--reportfile"/>
            <arg value="${builddir}/logs/pmd.xml"/>
        </exec>
    </target>

    <target name="phpcs"
            description="Verificação de violação de estilo de código, com output legível para uso antes de realizar commit">
        <exec executable="${basedir}/vendor/bin/phpcs${extension}">
        	<arg line="-p -d memory_limit=-1"/>
            <arg value="--standard=${builddir}/phpcs.xml"/>
            <arg path="${sourcedir}"/>
        </exec>
    </target>

    <target name="phpcs-ci"
            description="Verificação de violação de estilo de código, com geração de logs para o servidor de integração contínua">
        <exec executable="${basedir}/vendor/bin/phpcs${extension}">
        	<arg line="-p -d memory_limit=-1"/>
            <arg value="--report=checkstyle"/>
            <arg value="--report-file=${builddir}/logs/checkstyle.xml"/>
            <arg value="--standard=${builddir}/phpcs.xml"/>
            <arg path="${sourcedir}"/>
        </exec>
    </target>

    <target name="phpcpd"
            description="Detecção de código repetido">
        <exec executable="${basedir}/vendor/bin/phpcpd${extension}">
        	<arg value="--progress"/>
            <arg value="--log-pmd"/>
            <arg value="${builddir}/logs/pmd-cpd.xml"/>
            <arg path="${sourcedir}"/>
        </exec>
    </target>

    <target name="phpdox"
            description="Geração de documentação de API">
        <exec executable="${basedir}/vendor/bin/phpdox${extension}"/>
    </target>

    <target name="phpunit"
            description="Execução de testes unitários">
        <exec executable="${basedir}/vendor/bin/phpunit${extension}">
        	<arg line="-d memory_limit=-1"/>
    	</exec>
		<!-- O código abaixo corrige um erro do arquivo de cobertura que por vezes contabiliza na linha 0 gerando outofbound no parser https://jira.sonarsource.com/browse/SONARPHP-482 -->
		<replaceregexp match="&lt;line num=&quot;0&quot;.*/&gt;" replace="" flags="g" byline="true">
			<fileset file="build/coverage.xml"/>
		</replaceregexp>		
    </target>

    <target name="phpcb"
            description="Agregação de logs ao código fonte">
        <exec executable="${basedir}/vendor/bin/phpcb${extension}">
            <arg value="--log"/>
            <arg path="${builddir}/logs"/>
            <arg value="--source"/>
            <arg path="${sourcedir}"/>
            <arg value="--output"/>
            <arg path="${builddir}/code-browser"/>
        </exec>
    </target>
</project>